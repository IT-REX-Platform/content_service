# schema file of the microservice

type Content {
  id: UUID!
  name: String!
  rewardPoints: Int!
  workedOn: Boolean!
  tags: [Tag]!
}

input CreateContentInput {
    # name of the content, max 255 characters
    name: String! @NotBlank @Size(max: 255)
    rewardPoints: Int! @NotBlank
    workedOn: Boolean! @NotBlank
}

input UpdateContentInput {
    # UUID of the content that should be updated
    id: UUID!
    # name of the content, max 255 characters
    name: String! @NotBlank @Size(max: 255)
    rewardPoints: Int! @NotBlank
    workedOn: Boolean! @NotBlank
}

type Tag {
    name: String!
    id: UUID!
}

input CreateTagInput {
    # name of the tag, max 255 characters
    name: String! @NotBlank @Size(max: 255)
    contentId: UUID! @NotBlank
}

input UpdateTagInput {
    id: UUID!
    name: String! @NotBlank @Size(max: 255)
}

type Query {
    # get all contents
    contents: [Content]
    # get all tags
    tags: [Tag]
    # get contents by ids
    contentsById(ids: [UUID!]!): [Content!]!
    # get contents by tag name
    contentsByTagName(tag: String!): [Content!]!
    # get content by tag id
    contentByTag(tag: UUID!): Content
}

type Mutation {
    # Create a new Content
    createContent(input: CreateContentInput!): Content!
    # Create a new Tag
    createTag(input: CreateTagInput!): Tag!

    # Update an existing Content
    updateContent(input: UpdateContentInput!): Content!
    # Update an existing Tag
    updateTag(input: UpdateTagInput!): Tag!

    # Delete an existing Content, throws an error if no Content with the given id exists
    deleteContent(id: UUID!): UUID!
    # Delete an existing Tag, throws an error if no Tag with the given id exists
    deleteTag(id: UUID!): UUID!
}