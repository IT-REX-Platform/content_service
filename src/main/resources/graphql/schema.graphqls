# schema file of the microservice

type Content {
    # ID of the content
    id: UUID!
    # name of the content
    name: String!
    # Number of reward points a student receives for completing this content
    rewardPoints: Int!
    # purpose unclear
    workedOn: Boolean!
    # ID of the chapter this content is associated with
    chapterId: UUID!
    # TagNames this content is tagged with
    tagNames: [String]!
}

input CreateContentInput {
    # name of the content, max 255 characters, cannot be empty
    name: String! @NotBlank @Size(max: 255)
    # Number of reward points a student receives for completing this content
    rewardPoints: Int!
    # purpose unclear
    workedOn: Boolean!
    # chapter id the content will be associated with
    chapterId: UUID!
    # TagNames this content is tagged with
    tagNames: [String]!
}

input UpdateContentInput {
    # ID of the content that should be updated
    id: UUID!
    # new name of the content, max 255 characters
    name: String! @NotBlank @Size(max: 255)
    # new reward points of the content
    rewardPoints: Int!
    # new value for "workedOn" field of the content
    workedOn: Boolean!
    # ID of the chapter this content is associated with
    chapterId: UUID!
    # TagNames this content is tagged with
    tagNames: [String]!
}

type Query {
    # get all contents
    contents: [Content]
    # get contents by ids
    contentsById(ids: [UUID!]!): [Content!]!
    # get contents by chapter ids. Returns a list containing sublists, where each sublist contains all contents
    # associated with that chapter
    contentsByChapterIds(chapterIds: [UUID!]!): [[Content!]!]!
}

type Mutation {
    # Create a new Content
    createContent(input: CreateContentInput!): Content!
    # Update an existing Content
    updateContent(input: UpdateContentInput!): Content!
    # Delete an existing Content, throws an error if no Content with the given id exists
    deleteContent(id: UUID!): UUID!
    # Add tag to an existing content
    addTagToContent(contentId: UUID!, tagName: String): Content!
    # Remove tag from an existing content
    removeTagFromContent(contentId: UUID!, tagName: String): Content!
}